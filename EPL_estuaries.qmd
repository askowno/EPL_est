---
title: "EPL_estuaries"
format: html
---

#### Set up the Project and import the data

```{r}
# Add packages: 
library(sf)
library(tidyverse)
library(readxl)
library(stringr)


# Add spatial data - use IEM Jan 2025 then extract Estuaries
est_v <-st_read("C:/Users/skownoa/Dropbox/NBAwork/IEMworking/IEM5_12_07012025.gdb", layer = "IEM5_12_07012025") 
est_v <- est_v %>%
  mutate(outletID = as.numeric(E_EstID)) %>% # IEM miss names outletID as EstID (these are different codes)
  filter(outletID > 0, E_Est_BrdG != "Micro-System") # select only estuaries and exclude micros 

# Add tabular data (in excel change sheet name to Data, and remove last two rows on NAs, change cols with numbers at start of name )
est_t <- read_excel("C:/Users/skownoa/Dropbox/NBAwork/Estuaries/estuary_assesment2025_v8.xlsx", sheet = "Data")


pa <- st_read("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/NLC_Change.gdb", layer = "SANBI_PA_2024Q4_Mar2025") 


```

#### Clean up input data

```{r}
# Protected Areas - Subset PA data for 2018 and 2024 using DECL_YEAR, excluding properties degazetted using UNDECL_YEA. In preparation for this selection DECL_YEAR is set to 0 when unknown, and UNDCL_YEA is set to 9999 for those PAs that have never been degazetted.
options(scipen = 999)

pa2018 <- subset(pa, DECL_YEAR <  2019 & UNDECL_YEA >2018)
pa2024 <- subset(pa, DECL_YEAR <  2025 & UNDECL_YEA >2024)

# Estuaries have separate features for EFZ SHORE and EFZ, merge these together for calculating PA extent and EOO etc. Also IEM estuaries are divided up due to integration in IEM, so need to merge features based on outletID 
est_v2 <- est_v %>%
  group_by(outletID) %>%
  summarise(Shape = st_union(Shape), .groups = "drop")  

# select colums from  health spreadsheet import
est_t2 <- est_t %>%
  select(outletID,  estID, east_DD, south_DD, est_name, full_ecosystem_type_name, est_ecosystem_type_code, biogeographical_zone, efz_ha, `2025_est_condition`, `2018_est_condition`, `2011_est_condition`, Pressure_2025_fishing_effort_DEFF, Pressure_2018_fishing_effort_DEFF, Pressure_2011_fishing_effort_DEFF, `hundred_km-zone`, `Condition_100km-zone`, fish, fish2018) %>% 
# clean up names for r
  rename(hund_km_zone =`hundred_km-zone`, hund_km_zone_cond = `Condition_100km-zone`, 
       condition24 =`2025_est_condition`, condition18 =`2018_est_condition`, 
       condition11 = `2011_est_condition`, fishing_effort24 = Pressure_2025_fishing_effort_DEFF,
       fishing_effort18 = Pressure_2018_fishing_effort_DEFF, 
       fishing_effort11 = Pressure_2011_fishing_effort_DEFF) %>% 
  #fix Vh case 
  mutate(fishing_effort24 = ifelse(fishing_effort24 == "Vh", "VH", fishing_effort24)) %>%
  # drop black rows at end of table
  filter(!is.na(outletID ))

# combined estuary data into a table
est <- est_v2 %>%
  left_join(est_t2, by = "outletID") %>%
  # recalculate EFZ area m2 to check the data from Lara is correct
   mutate(efz_area = as.numeric(st_area(.))) 

```

#### Spatial Analysis

```{r}
# Intersect PA with Estuaris at each time point
pa18_est <- st_intersection(est, pa2018)
pa18_est <- pa18_est %>%
  mutate(area18pa = as.numeric(st_area(.))) %>%
   group_by(outletID) %>%
  summarise(sum_area18pa = sum((as.numeric(area18pa))), 
            .groups = "drop") %>%
  st_drop_geometry()
  
pa24_est <- st_intersection(est, pa2024)
pa24_est <- pa24_est %>%
  mutate(area24pa = as.numeric(st_area(.))) %>%
   group_by(outletID) %>%
  summarise(sum_area24pa = sum((as.numeric(area24pa))), 
            .groups = "drop") %>%
  st_drop_geometry()

# Join the PA extent calculations to the estuary   data (using outletID) and then group by est  type and summarise by Condition class
options(scipen = 999)

est <- est %>%
  st_drop_geometry() %>%
  left_join(pa24_est, by = "outletID") %>%
  left_join(pa18_est, by = "outletID") %>%
  mutate(across(c(sum_area24pa, sum_area18pa), ~ replace_na(.x, 0))) %>%
  # convert condition  scores to NBA modification classes  
  mutate(mod11 = case_when(
    round(condition11, 0) >= 90 ~ "Natural",
    round(condition11, 0) >= 75 ~ "NearNatural",
    round(condition11, 0) >= 60 ~ "Moderate",
    round(condition11, 0) >= 40 ~ "Heavily",
    TRUE ~ "Severely"
  )) %>%
  mutate(mod18 = case_when(
    round(condition18, 0) >= 90 ~ "Natural",
    round(condition18, 0) >= 75 ~ "NearNatural",
    round(condition18, 0) >= 60 ~ "Moderate",
    round(condition18, 0) >= 40 ~ "Heavily",
    TRUE ~ "Severely"
  )) %>%
   mutate(mod24 = case_when(
    round(condition24, 0) >= 90 ~ "Natural",
    round(condition24, 0) >= 75 ~ "NearNatural",
    round(condition24, 0) >= 60 ~ "Moderate",
    round(condition24, 0) >= 40 ~ "Heavily",
    TRUE ~ "Severely"
  )) %>%
   # convert condition  scores to PES classes
  mutate(pes11 = case_when(
    round(condition11, 0) >= 90 ~ "A",
    round(condition11, 0) >= 75 ~ "B",
    round(condition11, 0) >= 60 ~ "C",
    round(condition11, 0) >= 40 ~ "D",
    TRUE ~ "E"
  )) %>%
  mutate(pes18 = case_when(
    round(condition18, 0) >= 90 ~ "A",
    round(condition18, 0) >= 75 ~ "B",
    round(condition18, 0) >= 60 ~ "C",
    round(condition18, 0) >= 40 ~ "D",
    TRUE ~ "E"
  )) %>%
   mutate(pes24 = case_when(
    round(condition24, 0) >= 90 ~ "A",
    round(condition24, 0) >= 75 ~ "B",
    round(condition24, 0) >= 60 ~ "C",
    round(condition24, 0) >= 40 ~ "D",
    TRUE ~ "E"
  )) 


```

#### Summarise data per type

```{r}

#summarise by est  type including extent per type per condition class - this allows for inclusion of condition in the EPL formula
options(scipen = 999)

# overall type x cond summary

est_type_18 <- est %>%
    group_by(full_ecosystem_type_name, pes18) %>%
  summarise(extent = sum(as.numeric(efz_area), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = pes18, values_from = extent, values_fill = list(extent = 0))  %>%
  mutate(tot_ext18 = rowSums(across(c(A, B, C, D, E))))

est_type_24 <- est %>%
    group_by(full_ecosystem_type_name, pes24) %>%
  summarise(extent = sum(as.numeric(efz_area), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = pes24, values_from = extent, values_fill = list(extent = 0))  %>%
  mutate(tot_ext24 = rowSums(across(c(A, B, C, D, E))))


# PA x type x cond  summary 
 est_type_pa18 <- est %>%
    group_by(full_ecosystem_type_name, pes18) %>%
  summarise(extent = sum(as.numeric(sum_area18pa), na.rm = TRUE)) %>%
  ungroup()  %>%
  pivot_wider(names_from = pes18, values_from = extent,values_fill = list(extent = 0))  %>%
  mutate(ext_pa18 = rowSums(across(c(A, B, C, D, E))))

 est_type_pa24 <- est %>%
    group_by(full_ecosystem_type_name, pes24) %>%
  summarise(extent = sum(as.numeric(sum_area24pa), na.rm = TRUE)) %>%
  ungroup()  %>%
  pivot_wider(names_from = pes24, values_from = extent,values_fill = list(extent = 0))  %>%
  mutate(ext_pa24 = rowSums(across(c(A, B, C, D, E))))
  
 # PA X type x fishing summary
 est_type_pa18_hfp <- est %>%
    group_by(full_ecosystem_type_name, fishing_effort18) %>%
  summarise(extent = sum(as.numeric(sum_area18pa), na.rm = TRUE)) %>%
  ungroup()  %>%
  pivot_wider(names_from = fishing_effort18, values_from = extent,values_fill = list(extent = 0))  %>%
  mutate(ext_pa18_hfp = rowSums(across(c(VH, H)))) %>%
  select(full_ecosystem_type_name, ext_pa18_hfp)
 
est_type_pa24_hfp <- est %>%
    group_by(full_ecosystem_type_name, fishing_effort24) %>%
  summarise(extent = sum(as.numeric(sum_area24pa), na.rm = TRUE)) %>%
  ungroup()  %>%
  pivot_wider(names_from = fishing_effort24, values_from = extent,values_fill = list(extent = 0))  %>%
  mutate(ext_pa24_hfp = rowSums(across(c(VH, H)))) %>%
  select(full_ecosystem_type_name, ext_pa24_hfp)
 
 # Join the 4 tables above - this makes a single table in which all the required metrics can be found to compute EPL (note tot ext 18 and to ext 24 are identical )
 
 est_type_metrics <- est_type_18 %>%
   select(full_ecosystem_type_name, tot_ext18) %>%
   left_join(est_type_pa18, by = "full_ecosystem_type_name") %>%
   rename(A18=A, B18=B, C18 = C, D18 = D, E18 = E) %>%
   left_join(est_type_pa18_hfp, by = "full_ecosystem_type_name") %>%
   left_join(est_type_pa24, by = "full_ecosystem_type_name") %>%
   left_join(est_type_pa24_hfp, by = "full_ecosystem_type_name") %>%
# 2018 metrics
   mutate(prp_pa18 = ext_pa18/tot_ext18) %>%
   # WP rule requires extent A and B within PA; less high fishing pressure areas within PA
   mutate(prp_pa18_ab_hfp = (A18 + B18 - ext_pa18_hfp)/tot_ext18) %>% 
   # MP PP NP requires proportioal contribution based on condition
   mutate(prp_pa18_model = (A18 + B18 + (0.5*C18) + (0.3*D18) + (0.1*E18))/tot_ext18) %>%
   mutate(EPL18_all = case_when( prp_pa18 >= 0.3 ~ "WP", 
                                 prp_pa18 >= 0.15 ~ "MP",
                                 prp_pa18 >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>% 
    mutate(EPL18_model = case_when( prp_pa18_ab_hfp >= 0.3 ~ "WP", 
                                 prp_pa18_model >= 0.15 ~ "MP",
                                 prp_pa18_model >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>%
# 2024 metrics   
   mutate(prp_pa24 = ext_pa24/tot_ext18) %>% # note tot_ext 2018 and 2024 are same
   # WP rule requires extent A and B within PA; less high fishing pressure areas within PA
      mutate(prp_pa24_ab_hfp = (A + B - ext_pa24_hfp)/tot_ext18) %>% 
   # MP PP NP requires proportioal contribution base don condition
   mutate(prp_pa24_model = (A + B + (0.5*C) + (0.3*D) + (0.1*E))/tot_ext18) %>%
   mutate(EPL24_all = case_when( prp_pa24 >= 0.3 ~ "WP", 
                                 prp_pa24 >= 0.15 ~ "MP",
                                 prp_pa24 >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) %>% 
    mutate(EPL24_model = case_when( prp_pa24_ab_hfp >= 0.3 ~ "WP", 
                                 prp_pa24_model >= 0.15 ~ "MP",
                                 prp_pa24_model >= 0.015 ~ "PP",
                                 TRUE ~ "NP")) 
   # reattached bioregions
 bioreg <- est_t %>%
  select(full_ecosystem_type_name, biogeographical_zone) %>%
      distinct(full_ecosystem_type_name, .keep_all = TRUE)
 
 est_type_metrics <- est_type_metrics %>%
      left_join(bioreg , by = "full_ecosystem_type_name" ) %>%
      mutate(biogeographical_zone = str_sub(biogeographical_zone, 2)) %>%
      relocate(biogeographical_zone, .after = full_ecosystem_type_name) 
      
    
   # export a csv of results - Condition and EPL per river type 2018 and 2024
   write.csv(est_type_metrics, file = "outputs/epl_est_metrics_per_type.csv")
```

#### Output tables

```{r}
# 2018 summaries
# make summary counts of EPL categories per HGM
 epl18_sum <- est_type_metrics %>%
    group_by(EPL18_model, biogeographical_zone) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = EPL18_model, 
              values_from = count, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., biogeographical_zone = "Total", across(where(is.numeric), sum))) %>%
  # Add EPLindex
  mutate(EPLI = ((WP*3)+(MP*2)+(PP*1)+(NP*0))/((WP+MP+PP+NP)*3)) %>%
    mutate(biogeographical_zone = factor(biogeographical_zone, levels = c("Total", "Tropical", "SubTrop" , "WTemp", "CTemp"))) %>% ## ggplot plots inverted factors!
   arrange(biogeographical_zone)
 
 # export a csv of results - COUNT of EPL 18 per biogr 
 write.csv(epl18_sum, file = "outputs/epl18_est_sum_count.csv") 
 
  # make summary of extent of EPL
 epl18_sum_ext <- est_type_metrics %>%
    group_by(EPL18_model, biogeographical_zone) %>%
  summarise(extent = round(sum(tot_ext18)/1000000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = EPL18_model, 
              values_from = extent, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm_simple = "Total", across(where(is.numeric), sum))) %>%
    mutate(biogeographical_zone = factor(biogeographical_zone, levels = c("Total", "Tropical", "SubTrop" , "WTemp", "CTemp"))) %>% ## ggplot plots inverted factors!
   arrange(biogeographical_zone)
 
 # export a csv of results - EXTENT (km) of EPL 18 per slope zone
  write.csv(epl18_sum_ext, file = "outputs/epl18_est_sum_ext.csv")

  # Convert extent per epl category to proportion 
  epl18_sum_prpext <- epl18_sum_ext %>%
  filter(biogeographical_zone != "Total") %>%
  mutate(across(c(WP, MP, PP, NP), ~ round(.x / Total, 3))) %>%
  select(biogeographical_zone, WP, MP, PP, NP)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of EPL 18 per slope zone
   write.csv(epl18_sum_prpext, file = "outputs/epl18_est_sum_prp.csv")
 
  # 2024 summaries
  # make summary counts of EPL
  epl24_sum <- est_type_metrics %>%
    group_by(EPL24_model, biogeographical_zone) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = EPL24_model, 
              values_from = count, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., biogeographical_zone = "Total", across(where(is.numeric), sum))) %>%
  # Add EPLindex
  mutate(EPLI = ((WP*3)+(MP*2)+(PP*1)+(NP*0))/((WP+MP+PP+NP)*3)) %>%
     mutate(biogeographical_zone = factor(biogeographical_zone, levels = c("Total", "Tropical", "SubTrop" , "WTemp", "CTemp"))) %>% ## ggplot plots inverted factors!
   arrange(biogeographical_zone)
 
  
 # export a csv of results - COUNT of EPL 18 per slope zone
 write.csv(epl24_sum, file = "outputs/epl24_est_sum_count.csv") 
 
 # make summary of extent of EPL
 epl24_sum_ext <- est_type_metrics %>%
    group_by(EPL24_model, biogeographical_zone) %>%
  summarise(extent = round(sum(tot_ext18)/1000000, 0),.groups = 'drop') %>% # note the total est extent 2018 and 2024 is same
  pivot_wider(names_from = EPL24_model, 
              values_from = extent, values_fill = 0) %>%
  relocate(WP, .before = MP)%>%
  relocate(NP, .after = PP) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., biogeographical_zone = "Total", across(where(is.numeric), sum))) %>%
   mutate(biogeographical_zone = factor(biogeographical_zone, levels = c("Total", "Tropical", "SubTrop" , "WTemp", "CTemp"))) %>% ## ggplot plots inverted factors!
   arrange(biogeographical_zone)
 
 
 # export a csv of results - EXTENT (km) of EPL 18 per slope zone
  write.csv(epl24_sum_ext, file = "outputs/epl24_est_sum_ext.csv")
 
 epl24_sum_prpext <- epl24_sum_ext %>%
  filter(biogeographical_zone != "Total") %>%
  mutate(across(c(WP, MP, PP, NP), ~ round(.x / Total, 3))) %>%
  select(biogeographical_zone, WP, MP, PP, NP)
 
 # export a csv of results - PROPORTIONAL EXTENT  (km) of EPL 24 per biogr 
   write.csv(epl24_sum_prpext, file = "outputs/epl24_est_sum_prp.csv")
```

#### **Make graphs for NBA**

```{r}

# load nbaR package : first run this in console devtools::install_github("SANBI-NBA/nbaR") 
library(nbaR)
library(extrafont) # this has tools for embedding fonts in vector graphics which 
# is required by the design team of the booklet.
loadfonts(device = "pdf") # this is required as device = cairo_pdf is not compatible with CorelDraw

# Use NBA package to make EPL graph (need high res output for booklet)
EPL24count <- epl24_sum %>%
    rename(`Well Protected` = WP, 
           `Moderately Protected` = MP, 
           `Poorly Protected` = PP, 
           `Not Protected` = NP ) # %>%
  # select(-...1) # required if importing from CSV
 
epl24_bar_plot_count <- nba_plot(EPL24count,
                  `biogeographical_zone`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                SAVE = NULL,
                SCALE_TEXT = 0.6)

epl24_bar_plot_count <- epl24_bar_plot_count +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 
# to tweak position of legend uselegend.margin to prevent it being cut off: 
# make l more negative to shift left etc 
# but it is also affected by SCALE_TEXT above

#export the graph
ggsave(
  filename = "outputs/epl24_est_bar_plot_count.jpeg", # File name
  plot = epl24_bar_plot_count,                  # Plot object
  width = 9, height = 7, units = "cm"   # Dimensions
)

# graphs for extent per slope zone per epl category

EPL24ext <- epl24_sum_ext %>%
    rename(`Well Protected` = WP, 
           `Moderately Protected` = MP, 
           `Poorly Protected` = PP, 
           `Not Protected` = NP ) 
  
 
epl24_bar_plot_ext <- nba_plot(EPL24ext,
                  `biogeographical_zone`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem extent",
                SAVE = NULL, 
                SCALE_TEXT = 0.6)

epl24_bar_plot_ext <- epl24_bar_plot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 
# to tweak position of legend uselegend.margin to prevent it being cut off: 
# make l more negative to shift left etc 
# but it is also affected by SCALE_TEXT above

#export the graph
ggsave(
  filename = "outputs/epl24_est_bar_plot_ext.jpeg", # File name
  plot = epl24_bar_plot_ext,                  # Plot object
  width = 9, height = 7, units = "cm"   # Dimensions
)

# Make a line plot of EPL Index using 2018 and 2014 timepoints - request Natasha to impve this or add to package.

EPLI <- epl24_sum %>%
  select(biogeographical_zone, EPLI) %>% 
  rename(EPLI24 = EPLI) %>%
   left_join(epl18_sum, by ="biogeographical_zone") %>%
   rename(EPLI18 = EPLI) %>%
   rename(Zone = biogeographical_zone) %>%
  select(Zone,EPLI18, EPLI24) %>%
  pivot_longer(cols = c(2,3), names_to = "Year", values_to = "EPLI") %>%
    mutate(Year = case_when(
    Year == "EPLI18" ~ "2018",
    Year == "EPLI24" ~ "2024",
    TRUE ~ Year
  ))
  
 epli_line_plot <- ggplot(EPLI, aes(x = Year, y = EPLI, group = Zone)) +
  geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
  geom_point(aes(color = Zone), size = 2) +
  theme_minimal() +
  labs(x = "Year", y = "EPLI") +
  scale_x_discrete(limits = c("2018", "2024"), expand = c(0, 0)) +
  scale_color_manual(values = c(
    "Total" = "black",
    "CTemp" = "blue",
    "WTemp" = "darkgreen",
    "SubTrop" = "brown",
    "Tropical" = "orange"
  )) +
  coord_cartesian(ylim = c(0.4, 0.8))+ # Commented out or adjust as needed
  guides(color = guide_legend(reverse = TRUE),
         linetype = guide_legend(reverse = TRUE)) +
  theme(legend.title = element_blank())

 #export the graph
ggsave(
  filename = "outputs/epli_est_line_plot.jpeg", 
  plot = epli_line_plot,                   
  width = 12, height = 10, units = "cm")

# for pdf use device = "pdf" and drop resolution 
```

```{r}
# Prepare output spatial data 
# est_epl_res_v <- est_v2 %>%
#   left_join(est_t2, by = "outletID") %>%
#   select(outletID, full_ecosystem_type_name, est_name) %>%
#   left_join(est_type_metrics, by = "full_ecosystem_type_name") %>%
#   relocate(biogeographical_zone, .after = full_ecosystem_type_name)
#  
# st_write(est_epl_res_v, "C:/Users/skownoa/Dropbox/NBAwork/Estuaries/est_epl_results.gpkg") 
```
